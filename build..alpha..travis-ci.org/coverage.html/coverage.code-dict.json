{"/home/travis/build/npmtest/node-npmtest-each/test.js":"/* istanbul instrument in package npmtest_each */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-each/lib.npmtest_each.js":"/* istanbul instrument in package npmtest_each */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_each = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_each = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-each/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-each && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_each */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_each\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_each.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_each.rollup.js'] =\n            local.assetsDict['/assets.npmtest_each.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_each.__dirname + '/lib.npmtest_each.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-each/node_modules/each/lib/index.js":"// Generated by CoffeeScript 1.10.0\nvar Each, glob, path, stream, util;\n\nstream = require('stream');\n\npath = require('path');\n\nglob = require('glob');\n\nutil = require('util');\n\n\n/*\neach(elements)\n.parallel(false|true|integer)\n.sync(false)\n.times(1)\n.repeat(1)\n.files(cwd, ['./*.coffee'])\n.push(element)\n.unshift(element)\n.write(element)\n.pause()\n.resume()\n.close()\n.call(callback)\n.error(callback)\n.then(callback)\nChained and parallel async iterator in one elegant function\n */\n\nEach = function(options, _elements) {\n  var isObject, self, type;\n  this.options = options;\n  this._elements = _elements;\n  if (arguments.length === 1) {\n    this._elements = this.options;\n    this.options = {};\n  }\n  type = typeof this._elements;\n  if (this._elements === null || type === 'undefined') {\n    this._elements = [];\n  } else if (type === 'number' || type === 'string' || type === 'function' || type === 'boolean') {\n    this._elements = [this._elements];\n  } else if (!Array.isArray(this._elements)) {\n    isObject = true;\n  }\n  if (isObject) {\n    this._keys = Object.keys(this._elements);\n  }\n  this._errors = [];\n  this.options.concurrency = 1;\n  this.options.sync = false;\n  this.options.times = 1;\n  this.options.repeat = false;\n  this._close = false;\n  this._handler_index = 0;\n  this.total = this._keys ? this._keys.length : this._elements.length;\n  this.listeners = [];\n  this._endable = 1;\n  this.started = 0;\n  this.done = 0;\n  this.paused = 0;\n  this.readable = true;\n  self = this;\n  setImmediate((function(_this) {\n    return function() {\n      return _this._run();\n    };\n  })(this));\n  return this;\n};\n\nEach.prototype._has_next_handler = function() {\n  var j, len, listener, occurences, ref;\n  occurences = 0;\n  ref = this.listeners;\n  for (j = 0, len = ref.length; j < len; j++) {\n    listener = ref[j];\n    if (listener[0] !== 'call') {\n      continue;\n    }\n    if (occurences === this._handler_index) {\n      return true;\n    }\n    occurences++;\n  }\n  return false;\n};\n\nEach.prototype._get_current_handler = function() {\n  var j, len, listener, occurences, ref;\n  occurences = 0;\n  ref = this.listeners;\n  for (j = 0, len = ref.length; j < len; j++) {\n    listener = ref[j];\n    if (listener[0] !== 'call') {\n      continue;\n    }\n    if (occurences === this._handler_index) {\n      return listener[1];\n    }\n    occurences++;\n  }\n  throw Error('No Found Handler');\n};\n\nEach.prototype._call_next_then = function(error, count) {\n  var i, j, len, listener, occurences, ref, ref1, ref2;\n  occurences = 0;\n  ref = this.listeners;\n  for (i = j = 0, len = ref.length; j < len; i = ++j) {\n    listener = ref[i];\n    if (listener[0] === 'call') {\n      occurences++;\n      continue;\n    }\n    if (listener[0] === 'error' && error && occurences >= this._handler_index) {\n      listener[1].call(null, error);\n      if (((ref1 = this.listeners[i + 1]) != null ? ref1[0] : void 0) === 'then') {\n        continue;\n      } else {\n        return;\n      }\n    }\n    if (listener[0] === 'then' && occurences >= this._handler_index) {\n      if (((ref2 = this.listeners[i - 1]) != null ? ref2[0] : void 0) === 'error') {\n        if (!error) {\n          listener[1].call(null, count);\n        }\n      } else {\n        listener[1].call(null, error, count);\n      }\n      return;\n    }\n  }\n  throw Error('Invalid State: error or then not defined');\n};\n\nEach.prototype._run = function() {\n  var args, err, error, error1, handler, handlers, i, index, j, l, len, self;\n  if (this.paused) {\n    return;\n  }\n  handlers = this._get_current_handler();\n  error = null;\n  if (this._endable === 1 && (this._close || this.done === this.total * this.options.times * handlers.length || (this._errors.length && this.started === this.done))) {\n    this._handler_index++;\n    if (this._errors.length || !this._has_next_handler()) {\n      this.readable = false;\n      if (this._errors.length) {\n        if (this.options.concurrency !== 1) {\n          if (this._errors.length === 1) {\n            error = this._errors[0];\n          } else {\n            error = new Error(\"Multiple errors (\" + this._errors.length + \")\");\n            error.errors = this._errors;\n          }\n        } else {\n          error = this._errors[0];\n        }\n      } else {\n        args = [];\n      }\n      this._call_next_then(error, this.done);\n      return;\n    }\n    handlers = this._get_current_handler();\n    this._endable = 1;\n    this.started = 0;\n    this.done = 0;\n    this.paused = 0;\n    this.readable = true;\n  }\n  if (this._errors.length !== 0) {\n    return;\n  }\n  while ((this.options.concurrency === true ? (this.total * this.options.times * handlers.length - this.started) > 0 : Math.min(this.options.concurrency - this.started + this.done, this.total * this.options.times * handlers.length - this.started))) {\n    if (this._errors.length !== 0) {\n      break;\n    }\n    if (this._close) {\n      break;\n    }\n    if (this.options.repeat) {\n      index = this.started % this._elements.length;\n    } else {\n      index = Math.floor(this.started / (this.options.times * handlers.length));\n    }\n    this.started += handlers.length;\n    try {\n      self = this;\n      for (i = j = 0, len = handlers.length; j < len; i = ++j) {\n        handler = handlers[i];\n        l = handler.length;\n        if (this.options.sync) {\n          l++;\n        }\n        switch (l) {\n          case 1:\n            args = [];\n            break;\n          case 2:\n            if (this._keys) {\n              args = [this._elements[this._keys[index]]];\n            } else {\n              args = [this._elements[index]];\n            }\n            break;\n          case 3:\n            if (this._keys) {\n              args = [this._keys[index], this._elements[this._keys[index]]];\n            } else {\n              args = [this._elements[index], index];\n            }\n            break;\n          case 4:\n            if (this._keys) {\n              args = [this._keys[index], this._elements[this._keys[index]], index];\n            } else {\n              return self._next(new Error('Invalid arguments in item callback'));\n            }\n            break;\n          default:\n            return self._next(new Error('Invalid arguments in item callback'));\n        }\n        if (!this.options.sync) {\n          args.push((function() {\n            var count;\n            count = 0;\n            return function(err) {\n              if (err) {\n                return self._next(err);\n              }\n              if (++count !== 1) {\n                err = new Error('Multiple call detected');\n                if (self.readable) {\n                  return self._next(err);\n                } else {\n                  throw err;\n                }\n              }\n              return self._next();\n            };\n          })());\n        }\n        err = handler.apply(null, args);\n        if (this.options.sync) {\n          self._next(err);\n        }\n      }\n    } catch (error1) {\n      err = error1;\n      if (self.readable) {\n        self._next(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n  return null;\n};\n\nEach.prototype._next = function(err) {\n  if ((err != null) && err instanceof Error) {\n    this._errors.push(err);\n  }\n  this.done++;\n  return this._run();\n};\n\nEach.prototype.run = function(callback) {\n  console.log('DEPRECATED: use `call` instead of `run`');\n  return this.call(callback);\n};\n\nEach.prototype.call = function(callback) {\n  if (!Array.isArray(callback)) {\n    callback = [callback];\n  }\n  this.listeners.push(['call', callback]);\n  return this;\n};\n\nEach.prototype.then = function(callback) {\n  this.listeners.push(['then', callback]);\n  return this;\n};\n\nEach.prototype.end = function(callback) {\n  this.listeners.push(['end', callback]);\n  return this;\n};\n\nEach.prototype.error = function(callback) {\n  this.listeners.push(['error', callback]);\n  return this;\n};\n\nEach.prototype.end = function() {\n  console.log('Function `end` deprecated, use `close` instead.');\n  return this.close();\n};\n\nEach.prototype.close = function() {\n  this._close = true;\n  this._next();\n  return this;\n};\n\nEach.prototype.sync = function(s) {\n  this.options.sync = (s != null) || true;\n  return this;\n};\n\nEach.prototype.repeat = function(t) {\n  this.options.repeat = true;\n  this.options.times = t;\n  if (this._elements.length === 0) {\n    this.write(null);\n  }\n  return this;\n};\n\nEach.prototype.times = function(t) {\n  this.options.times = t;\n  if (this._elements.length === 0) {\n    this.write(null);\n  }\n  return this;\n};\n\nEach.prototype.files = function(base, pattern) {\n  var j, len, p;\n  if (arguments.length === 1) {\n    pattern = base;\n    base = null;\n  }\n  if (Array.isArray(pattern)) {\n    for (j = 0, len = pattern.length; j < len; j++) {\n      p = pattern[j];\n      this.files(p);\n    }\n    return this;\n  }\n  this._endable--;\n  if (base) {\n    pattern = path.resolve(base, pattern);\n  }\n  glob(pattern, (function(_this) {\n    return function(err, files) {\n      var file, k, len1;\n      for (k = 0, len1 = files.length; k < len1; k++) {\n        file = files[k];\n        _this._elements.push(file);\n      }\n      _this.total += files.length;\n      return setImmediate(function() {\n        _this._endable++;\n        return _this._run();\n      });\n    };\n  })(this));\n  return this;\n};\n\nEach.prototype.write = Each.prototype.push = function(item) {\n  var l;\n  l = arguments.length;\n  if (l === 1) {\n    this._elements.push(arguments[0]);\n  } else if (l === 2) {\n    if (!this._keys) {\n      this._keys = [];\n    }\n    this._keys.push(arguments[0]);\n    this._elements[arguments[0]] = arguments[1];\n  }\n  this.total++;\n  return this;\n};\n\nEach.prototype.unshift = function(item) {\n  var index, l;\n  l = arguments.length;\n  if (this.options.repeat) {\n    index = this.started % this._elements.length;\n  } else {\n    index = Math.floor(this.started / this.options.times);\n  }\n  if (l === 1) {\n    this._elements.splice(index, 0, arguments[0]);\n  } else if (l === 2) {\n    if (!this._keys) {\n      this._keys = [];\n    }\n    this._keys.splice(index, 0, arguments[0]);\n    this._elements[arguments[0]] = arguments[1];\n  }\n  this.total++;\n  return this;\n};\n\nEach.prototype.pause = function() {\n  return this.paused++;\n};\n\nEach.prototype.resume = function() {\n  this.paused--;\n  return this._run();\n};\n\nEach.prototype.parallel = function(mode) {\n  if (typeof mode === 'number') {\n    this.options.concurrency = mode;\n  } else if (mode) {\n    this.options.concurrency = mode;\n  } else {\n    this.options.concurrency = 1;\n  }\n  return this;\n};\n\nmodule.exports = function(elements) {\n  return new Each(elements);\n};\n\nmodule.exports.Each = Each;\n","/home/travis/build/npmtest/node-npmtest-each/node_modules/each/index.js":"\nmodule.exports = require('./lib/each')","/home/travis/build/npmtest/node-npmtest-each/node_modules/each/samples/api.promise.js":"\nvar each = require('..');\n\neach( [{id: 1}, {id: 2}, {id: 3}] )\n.call( function(element, index, next){\n  console.log('element: ', element, '@', index);\n  setTimeout(next, 500);\n})\n.then( function(err){\n  console.log(err ? err.message : 'Done');\n});\n","/home/travis/build/npmtest/node-npmtest-each/node_modules/each/samples/array_concurrent.js":"\nvar each = require('..');\n\neach( [{id: 1}, {id: 2}, {id: 3}] )\n.parallel( 4 )\n.call(function(element, index, next) {\n  console.log('element: ', element, '@', index);\n  setTimeout(next, 500);\n})\n.error(function(err){\n  console.log(err.message);\n  err.errors.forEach(function(error){\n    console.log('  '+error.message);\n  });\n})\n.then(function(){\n  console.log('Done');\n});\n","/home/travis/build/npmtest/node-npmtest-each/node_modules/each/samples/array_parallel.js":"\nvar each = require('..');\n\neach( [{id: 1}, {id: 2}, {id: 3}] )\n.parallel( true )\n.call(function(element, index, next) {\n  console.log('element: ', element, '@', index);\n  setTimeout(next, 500);\n})\n.error(function(err){\n  console.log(err.message);\n  err.errors.forEach(function(error){\n    console.log('  '+error.message);\n  });\n})\n.then(function(){\n  console.log('Done');\n});\n","/home/travis/build/npmtest/node-npmtest-each/node_modules/each/samples/array_sequential.js":"\nvar each = require('..');\n\neach( [{id: 1}, {id: 2}, {id: 3}] )\n.call(function(element, index, next) {\n  console.log('element: ', element, '@', index);\n  setTimeout(next, 500);\n})\n.error(function(err) {\n  console.log(err.message);\n})\n.then(function() {\n  console.log('Done');\n});\n","/home/travis/build/npmtest/node-npmtest-each/node_modules/each/samples/object_concurrent.js":"\nvar each = require('..');\n\neach( {id_1: 1, id_2: 2, id_3: 3} )\n.parallel( 2 )\n.call(function(key, value, next) {\n  console.log('key: ', key);\n  console.log('value: ', value);\n  setTimeout(next, 500);\n})\n.error(function(err){\n  console.log(err.message);\n  err.errors.forEach(function(error){\n    console.log('  '+error.message);\n  });\n})\n.then(function(){\n  console.log('Done');\n});\n","/home/travis/build/npmtest/node-npmtest-each/node_modules/each/samples/object_sequential.js":"\nvar each = require('..');\n\neach( {id_1: 1, id_2: 2, id_3: 3} )\n.call(function(key, value, next) {\n  console.log('key: ', key);\n  console.log('value: ', value);\n  setTimeout(next, 500);\n})\n.error(function(err) {\n  console.log(err.message);\n})\n.then(function() {\n  console.log('Done');\n});\n"}